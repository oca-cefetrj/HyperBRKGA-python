from numpy.core.defchararray import decode
from brkga_mp_ipr.exploitation_method import ExploitationMethod
from brkga_mp_ipr.types import *
from cmaes import CMA
from nn_decoder_PT import NNDecoder
import numpy as np

class CMAES(ExploitationMethod):
    def __init__(self, decoder: NNDecoder, population_size: int, sigma = 1.3, percentage = 1.0):

        self._decoder = decoder
        self._bounds = np.array([[0,1]]*len(decoder._limits))
        self._mean = np.array([0.5]*len(decoder._limits))
        self._results = []
        self._sigma = sigma
        self._population_size = population_size
        self._solutions = []
        self._percentage = percentage

        self._optimizer = CMA(bounds=self._bounds, mean=self._mean, sigma=self._sigma, population_size=self._population_size)

    def initialize(self, initial_populations):
        # Tell all the individuals to the optimizer
        for population in initial_populations:
            initial_solution = []
            for individual_idx in range(len(population.chromosomes)):
                individual = population.chromosomes[individual_idx]
                value = [x for (x,y) in population.fitness if y == individual_idx][0]
                initial_solution.append((individual, -value))
                self._solutions.append((individual, -value))
            self._optimizer.tell(initial_solution)
        return initial_populations

    def new_chromosomes(self, new_chromosomes: BaseChromosome):
        # Replace clones with suggestions from the optimizer
        for chromosome_idx in range(len(new_chromosomes)):
            if new_chromosomes[chromosome_idx] in [x for (x, value) in self._solutions]:
                new_chromosomes[chromosome_idx] = self._optimizer.ask().tolist()
        return new_chromosomes

    def new_population(self, new_population: Population):
        # Tell the new individuals to the optimizer
        new_solutions = []
        for individual_idx in range(len(new_population.chromosomes)):
            individual = new_population.chromosomes[individual_idx]
            value = [x for (x,y) in new_population.fitness if y == individual_idx][0]
            if not individual in [x for (x, value) in self._solutions]: # Add the individual only if it haven't been added before
                self._solutions.append((individual, -value))
            new_solutions.append((individual, -value))
        self._optimizer.tell(new_solutions)

        # Ask the optimizer for new solutions and evaluate them
        new_solutions = []
        for _ in range(self._optimizer.population_size):
            x = self._optimizer.ask().tolist()
            value = self._decoder.decode(chromosome=x, rewrite=False, percentage=self._percentage)
            new_solutions.append((x, -value))

        ###
        current_solutions = []
        for solution in new_solutions:
            current_solutions.append((solution[0], -solution[1]))
        for solution in new_population.fitness:
            x = new_population.chromosomes[solution[1]]
            current_solutions.append((x, solution[0]))
        current_solutions.sort(key= lambda x: x[1], reverse= True)

        for i in range(len(new_population.chromosomes)):
            new_population.chromosomes[i] = current_solutions[i][0]
            new_population.fitness[i] = (current_solutions[i][1], i)
        ###

        # Tell the new solutions to the optimizer
        for solution in new_solutions:
            self._solutions.append(solution)
        self._optimizer.tell(new_solutions)
        return new_population